#compdef make

# Zsh completion for Terraform/OpenTofu Makefile
# Usage: Place this file in your zsh completions directory (e.g., ~/.oh-my-zsh/completions/_make-terraform)
# or add it to your fpath and run compinit

_make_terraform() {
    local context state line
    local -a environments targets tofu_commands
    
    # Available environments
    environments=(
        'production:Production environment'
        'staging:Staging environment'
        'development:Development environment'
    )
    
    # Available make targets with descriptions
    targets=(
        'help:Show help information'
        'init:Initialize Terraform for environment'
        'plan:Plan changes for environment'
        'apply:Apply changes for environment'
        'destroy:Destroy infrastructure for environment'
        'tofu:Run any tofu command with proper environment setup'
        'edit-secrets:Edit secrets for specific environment'
        'setup-secrets:Create all missing secrets files from templates'
        'check-secrets:Check if secrets exist for environment'
        'edit-variables:Edit variables for specific environment'
        'setup-variables:Create all missing variables files from templates'
        'check-variables:Check if variables exist for environment'
        'encrypt-states:Encrypt all .tfstate files to .tfstate.gpg'
        'decrypt-states:Decrypt all .tfstate.gpg files to .tfstate'
        'cleanup-states:Remove plaintext .tfstate files (keep encrypted)'
        'check-states:Check if all state files have encrypted versions'
        'workspace-list:List all workspaces'
        'workspace-new:Create new workspace'
        'workspace-select:Select workspace'
        'workspace-current:Show current workspace'
        'fmt:Format Terraform files'
        'validate:Validate Terraform configuration'
    )
    
    # Common tofu subcommands
    tofu_commands=(
        'show:Show current state'
        'output:Show outputs'
        'import:Import existing resource'
        'state:Advanced state management'
        'plan:Create execution plan'
        'apply:Apply changes'
        'destroy:Destroy infrastructure'
        'init:Initialize working directory'
        'validate:Validate configuration'
        'fmt:Format configuration files'
        'providers:Show provider requirements'
        'lock:Write dependency lock file'
        'refresh:Update state'
        'console:Interactive console'
        'graph:Create visual graph'
        'get:Download modules'
        'taint:Mark resource for recreation'
        'untaint:Remove taint from resource'
        'force-unlock:Release stuck lock'
    )
    
    _arguments -C \
        '1: :->targets' \
        '*: :->args' && return 0
    
    case $state in
        targets)
            # Complete make targets
            _describe -t targets 'make targets' targets
            ;;
        args)
            case $words[2] in
                tofu)
                    # Special handling for tofu command
                    if [[ $words[CURRENT] == ENV=* ]]; then
                        # Complete environment after ENV=
                        _describe -t environments 'environments' environments -P 'ENV='
                    elif [[ $words[CURRENT-1] == "ENV=" ]]; then
                        # Complete environment after ENV= with space
                        _describe -t environments 'environments' environments
                    else
                        # Complete tofu subcommands or ENV=
                        _alternative \
                            'commands:tofu commands:_describe "tofu commands" tofu_commands' \
                            'env:environment:compadd -S "=" ENV'
                    fi
                    ;;
                init|plan|apply|destroy|edit-secrets|check-secrets|edit-variables|check-variables|workspace-new|workspace-select)
                    # Commands that require environment
                    if [[ $words[CURRENT] == ENV=* ]]; then
                        _describe -t environments 'environments' environments -P 'ENV='
                    else
                        compadd -S "=" ENV
                    fi
                    ;;
                *)
                    # For other commands, just complete ENV= if needed
                    if [[ $words[CURRENT] == ENV=* ]]; then
                        _describe -t environments 'environments' environments -P 'ENV='
                    elif [[ ! " ${words[@]} " =~ " ENV=" ]]; then
                        compadd -S "=" ENV
                    fi
                    ;;
            esac
            ;;
    esac
}

# Auto-enable completion if we're in a directory with terraform/tofu Makefile
if [[ -f "Makefile" ]] && grep -q "tofu\|terraform" Makefile 2>/dev/null; then
    compdef _make_terraform make
fi
